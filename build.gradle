buildscript {
    ext.kotlin_version = '1.4.10'

    repositories {
        maven { url rootProject.file("repo-local") }
        maven { url 'http://localhost:8081/nexus/content/groups/android_public/' }
        maven { url 'http://download.flutter.io'}
        mavenCentral()
        jcenter()
        google()
        maven { url "https://jitpack.io" }
        maven { url "${artifactory_contextUrl}/${artifactory_release_repoKey}" }
        maven { url "${artifactory_contextUrl}/${artifactory_snapshot_repoKey}" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.0'
        classpath 'com.billy.android:cc-register:1.1.2'
        classpath 'com.meituan.android.walle:plugin:1.1.7'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
    }
}

configurations.all {
    //SNAPSHOT 依赖缓存刷新频率 0
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

allprojects {
    repositories {
        maven { url rootProject.file("repo-local") }
        maven { url 'http://localhost:8081/nexus/content/groups/android_public/' }
        maven { url 'http://download.flutter.io'}
        mavenCentral()
        jcenter()
        google()
        maven { url "https://jitpack.io" }
        maven { url "${artifactory_contextUrl}/${artifactory_release_repoKey}" }
        maven { url "${artifactory_contextUrl}/${artifactory_snapshot_repoKey}" }
    }
}

subprojects { p ->
    tasks.whenObjectAdded {
        if (it.name == 'clean' && (p.pluginManager.hasPlugin('java') || p.pluginManager.hasPlugin('groovy'))
                || it.name == 'preBuild' && p.pluginManager.hasPlugin('com.android.library')) {
            println "============================ $p.name:$it.name"
            p.apply from: p.rootProject.file('artifactory.gradle')
        }
    }
}

ext {
    compileVersion = 29
    minVersion = 19
    supportVersion = '29.0.3'
    deps = [
            cc                 : 'com.billy.android:cc:2.1.6',
            appcompat          : "androidx.appcompat:appcompat:1.2.0-alpha01",
            supportV4          : "androidx.legacy:legacy-support-v4:1.0.0",
            recyclerview       : "androidx.recyclerview:recyclerview:1.2.0-alpha02",
            cardview           : "androidx.cardview:cardview:1.0.0",
            constraintlayout   : "androidx.constraintlayout:constraintlayout:2.0.0-beta4",
            corektx            : "androidx.core:core-ktx:1.2.0",
            percent            : "androidx.percentlayout:percentlayout:1.0.0",
            annotation         : "androidx.annotation:annotation:1.1.0",
            design             : "com.google.android.material:material-rc01:1.1.0",

            rxjava             : "io.reactivex.rxjava3:rxjava:3.0.2",
            rxandroid          : "io.reactivex.rxjava3:rxandroid:3.0.0",
            kotlin_stdlib_jdk7 : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.72",
            networking         : "com.amitshekhar.android:android-networking:1.0.2"
    ]


    propLocal = new Properties()
    fileLocal = new File('local.properties')
    if (fileLocal.exists()) {
        propLocal.load(fileLocal.newDataInputStream())
    }

    propModule = new Properties()
    fileModule = new File('artifactory_version.properties')
    propModule.load(fileModule.newDataInputStream())
    
    //maven依赖,artifactory_version存放名称,gradle存放版本号
    propModule.each {
        if (it.key != null && !it.key.startsWith("maven_")) {
            if (rootProject.hasProperty(it.key)) {//gradle.properties是否有该属性
                ver = rootProject.(it.key)
                if (ver != null && !ver.isEmpty()) {//版本号为空不加入
                    maven = new StringBuilder(maven_groupId).append(":")
                            .append(it.key).append(":")
                            .append(ver)
                    deps.put(it.key, maven)
                }
            }
        }
    }
    deps.each {
        logger.quiet("----mavenList---" + it.key + "=" + it.value)
    }

    //缓存本地module打包列表,默认只支持maven组为:cn.com.bailian.bailianmobile
    localModule = new ArrayList<String>()
    propModule.each {
        projectAdd = propLocal.getProperty(it.key)
        projectDependent = propLocal.getProperty(it.key + ".local")
        if ("true".equalsIgnoreCase(projectAdd) && "true".equalsIgnoreCase(projectDependent)) {
            localModule.add(it.key)
        }
    }
    localModule.each {
        logger.quiet("----localModule----"+it)
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
